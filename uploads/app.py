from flask import Flask,redirect,url_for,render_template,request
from result import get_result
from upload_data import upload_file_to_cuckoo
from Hash import SHA256
import os
from check_yara import detect_malware

# Thêm dữ liệu vào database
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from report import file_analyst
from export_attribute import get_predict
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['THREADS_PER_PAGE']=1

# Tạo đối tượng Engine và kết nối đến cơ sở dữ liệu (user.db)
engine = create_engine('sqlite:///history_result.db')

# Tạo một Base để tạo các class ORM
Base = declarative_base()

# Định nghĩa class ORM
class Sample(Base):
    __tablename__ = 'history_result'

    id = Column(Integer, primary_key=True)
    IP = Column(String)
    name = Column(String)
    hash_SHA256 = Column(String)
    Pre = Column(Integer)
    
# Tạo một session
Session = sessionmaker(bind=engine)
session = Session()



@app.route('/', methods=["POST", "GET"])
def hello_world():
    if request.method == "POST":
        try:
            id = int(request.form["name"])
        except ValueError :
            id = None
        if id:
            return redirect(url_for("result",result_id = int(id)))
    return render_template('home.html')

@app.route('/result/<int:result_id>', methods=["POST", "GET"])
def result(result_id):
    result = get_result(result_id)
    if request.method == "POST":
        return redirect(url_for("hello_world"))
    return render_template('index.html',content = result)

@app.route('/upload')
def upload_form():
    return render_template('upload.html')

@app.route('/upload/upload', methods=['POST'])
def upload_file():
    uploaded_file = request.files['file']
    client_ip = request.remote_addr
    if uploaded_file.filename != '':
        data = uploaded_file.getvalue()
        # Kiem tra file da co trong database chua
        # Lay hash_SHA256 cua file
        data_SHA256 = SHA256(data)
        # Tim ban ghi co hash giong data
        record = session.query(Sample).filter_by(hash_SHA256=str(data_SHA256)).first()
        
        if record:
            return redirect(url_for("result",result_id = int(record.id)))
        else :
            # Lay ID ban ghi cuoi trong database
            last_record = session.query(Sample).order_by(Sample.id.desc()).first()
            last_ID = last_record.id
            #Kiem tra voi Yara Rule
            check_yara = detect_malware(data)
            if check_yara:
                pre = 1
            else :
                # Lấy ID 
                task_id = upload_file_to_cuckoo(data,uploaded_file.filename)
                # Lấy báo cáo và kết quả dự đoán
                report = file_analyst(task_id)
                pre = get_predict(report)
            
            # Tạo 1 mẫu lưu kết quả
            result = Sample(id=last_ID+1,IP=client_ip,name=uploaded_file.filename,hash_SHA256=SHA256(data),Pre=pre)
            
            #Thêm dữ liêu vào database
            session.add(result)
            session.commit()
            
            # Lưu file vào thư mục uploads trong thư mục hiện tại
            file_path = os.path.join('uploads', uploaded_file.filename)
            uploaded_file.save(file_path)
            return redirect(url_for("result",result_id = int(task_id)))
    else:
        return 'Không có file được chọn.'

if __name__ == "__main__": 
    if not os.path.exists('uploads'):
        os.makedirs('uploads')
    app.run(debug=True,host='0.0.0.0',port=5000)